plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
}

def getApiToken() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("api.token")
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    // add databinding feature
    buildFeatures {
        dataBinding = true
    }

    defaultConfig {
        applicationId "com.example.exampleapp"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "Boolean", "FEATURE_OK_HTTP_VERBOSE", "false"
    }

    buildTypes {
        debug {
            debuggable true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions 'env'

    productFlavors {
        // run this flavor for localhost testing of api during development
        dev {
            dimension 'env'

            buildConfigField 'String', 'API_BASE_URL', '"http://10.0.2.2:44100/"'
            buildConfigField 'String', 'API_URL', '"http://10.0.2.2:44100/api/"'
            buildConfigField "String", "API_ACCESS_TOKEN", "\""+getApiToken()+"\""

            applicationIdSuffix '.dev'
        }

        // flavor for a packaged version of the app
        live {
            dimension 'env'

            // specify Live (external) API paths here
            buildConfigField 'String', 'API_BASE_URL', '"http://10.0.2.2:44100/"'
            buildConfigField 'String', 'API_URL', '"http://10.0.2.2:44100/api/"'
            buildConfigField "String", "API_ACCESS_TOKEN", "\""+getApiToken()+"\""
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    repositories {
        maven { url 'https://jitpack.io' }
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // added dependencies
    implementation 'com.bluelinelabs:conductor:2.1.5'
    implementation 'com.bluelinelabs:conductor-support:2.1.5'
    implementation 'com.github.miquelbeltran:conductor-viewmodel:1.0.3'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.6'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.1.0'
    implementation "com.squareup.retrofit2:converter-moshi:2.5.0"
    implementation 'com.jakewharton.rxbinding3:rxbinding:3.0.0-alpha2'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation "com.squareup.retrofit2:retrofit:2.5.0"
    implementation "com.squareup.retrofit2:adapter-rxjava2:2.5.0"
    implementation "com.squareup.moshi:moshi-kotlin:1.6.0"
    implementation "com.squareup.moshi:moshi:1.6.0"
    implementation "com.squareup.okhttp3:logging-interceptor:3.12.0"
    implementation "com.squareup.okhttp3:okhttp:3.12.0"

}

androidExtensions {
    // for @Parcelize extension
    experimental = true
}